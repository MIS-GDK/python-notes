# 函数返回值 返回的是内存地址


def func():
    data = [11, 22, 33]
    return data


# v1 = func()
# print(v1)
"""
上述代码的执行过程：
1、执行func函数
2、data=[11,22,33]创建一块内存区域，内部存储[11,22,33],data变量指向这块内存地址
3、return返回data指向的内存地址
4、v1接收返回值，v1和data都指向[11,22,33]的内存地址（两个变量指向此内存地址，引用技术器为2）
5、函数执行完成之后，函数内部的变量都会被释放。（删除data变量，内存地址的引用计数器-1）
所以，最终v1指向函数内部创建的那块内存地址
"""


v1 = func()
print(id(v1))

v2 = func()
print(id(v2))
"""
上述代码的执行过程：
1、执行func函数
2、data=[11,22,33]创建一块内存区域，内部存储[11,22,33],data变量指向这块内存地址 假设地址为：2933385089608
3、return返回data指向的内存地址
4、v1接收返回值，v1和data都指向[11,22,33]的内存地址（两个变量指向此内存地址，引用技术器为2）
5、函数执行完成之后，函数内部的变量都会被释放。（删除data变量，内存地址的引用计数器-1）
所以，最终v1指向函数内部创建的那块内存地址

1、执行func函数
2、data=[11,22,33]创建一块内存区域，内部存储[11,22,33],data变量指向这块内存地址 这里的地址不同于上一步，是新的内存地址：2933415500104
3、return返回data指向的内存地址
4、v2接收返回值，v2和data都指向[11,22,33]的内存地址（两个变量指向此内存地址，引用技术器为2）
5、函数执行完成之后，函数内部的变量都会被释放。（删除data变量，内存地址的引用计数器-1）
所以，最终v2指向函数内部创建的那块内存地址
"""

# git 测试22